G = {
    "Адмиралтейская": {
        "Садовая": 4},
    "Садовая": {
        "Сенная площадь": 4,
        "Спасская": 3,
        "Адмиралтейская": 4,
        "Звенигородская": 5},
    "Сенная площадь": {
        "Садовая": 4,
        "Спасская": 4},
    "Спасская": {
        "Садовая": 3,
        "Сенная площадь": 4,
        "Достоевская": 6},
    "Звенигородская": {
        "Пушкинская": 3,
        "Садовая": 5},
    "Пушкинская": {
        "Звенигородская": 3,
        "Владимирская": 4},
    "Владимирская": {
        "Достоевская": 3,
        "Пушкинская": 4},
    "Достоевская": {
        "Владимирская": 3,
        "Спасская": 6}
}

P = {k: None for k in G.keys()}  # вершины-предки с минимальным расстоянием

D = {k: 100 for k in G.keys()}  # расстояния

start_k = 'Адмиралтейская'  # стартовая вершина

D[start_k] = 0  # расстояние от неё до самой себя равно нулю

U = {k: False for k in G.keys()}  # флаги просмотра вершин

for _ in range(len(D)):
    # выбираем среди непросмотренных наименьшее по расстоянию
    min_k = min([k for k in U.keys() if not U[k]], key=lambda x: D[x])
    print("min_k=", min_k)
    print('G[min_k].keys()=', G[min_k].keys())
    for v in G[min_k].keys():  # проходимся по всем смежным вершинам
        print('v=', v, 'D[' + v + ']=', D[v], 'D[' + min_k + ']=', D[min_k], '+ G[' + min_k + '][' + v + ']=', G[min_k][v], '(',
              D[min_k] + G[min_k][v], ')')
        D[v] = min(D[v], D[min_k] + G[min_k][v])  # минимум
        print('D[' + v + ']=', D[v])
    U[min_k] = True  # просмотренную вершину помечаем


print('Предки min  P=', P)
print('Расстояния  D=', D)
print('Просм.верш. U=', U)

for _ in range(len(D)):


